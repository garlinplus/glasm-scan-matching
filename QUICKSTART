QUICKSTART
==========

Contents
--------

1. Introduction
2. Contents of the repository
3. Setting up a development environment with Eclipse
4. Building the sm_cli program
5. Preparing for the experiments
6. Running the tests
7. Analysing the results


Introduction
------------

The program sm_cli allows to batch test multiple scan matching algorithms from command line.
The results are printed to screen and optionaly PNG images are produced.


Contents of the repository
--------------------------

cfg/        - <todo: remove> optional configuration for playerstage simulated environments. Ignore if not using playerstage.
devdoc/fig  - <todo: remove>
examples/   - example scans and configurations
lib/        - libpngwriter library copied here for convenience since it is not included anymore in ubuntu repository
sm_cli.cpp - source code for sm_cli main program
launch_sm_cli.sh - optional bash script for batch execution of sm_cli (using different configurations)
<algorithm>_aux - wrappers for algorithms providing uniform interface to sm_cli
<algorith>  - algorithm implementations
utils.cpp - generic utility functions



Setting up a development environment with Eclipse
-------------------------------------------------

Quick description
^^^^^^^^^^^^^^^^^

Install Eclipse, CDT, ecc...
Install required libraries (png, boost_program_options, png writer, freetype,...).
Import existing project in eclipse (there is a .project file in the root of the repository)
... or create a new project. You will need to add required libraries and paths.
Build and run (you may want to configure the Run configurations in eclipse for that)


Detailed description
^^^^^^^^^^^^^^^^^^^^

As example we will install everything starting from a clean fresh Ubuntu 14.04.1 virtual machine. After the installation open the terminal window (Ctrl+Alt+T).

Preliminary step - update system

$ sudo apt-get update
$ sudo apt-get upgrade

Install eclipse with C/C++ development tools

$ sudo apt-get install eclipse-cdt
$ sudo apt-get install build-essential

Install git

$ sudo apt-get install git

Clone the glasm-scan-matching repository from github in your home folder (you can clone it wherever you want. It will be easier to create the eclipse project if you don't clone it in the eclipse workspace folder.)

$ cd
$ git clone https://github.com/klenac/glasm-scan-matching.git

Install required libraries

$ sudo apt-get install boost-program-options-dev libfreetype6-dev

From version Ubuntu 10.10 libpngwriter libraries are not available in the ubuntu repositories. They can be installed manually. Download the last available package for your architecture (http://packages.ubuntu.com/lucid/libpngwriter0-dev) (the packages for amd64 architecture are already included in the lib directory for convenience, so you don't have to download them).

$ sudo dpkg -i libpngwriter0* 


Create a new project in eclipse

File -> New -> Project -> C++ Project -> Executable -> Empty Project
Untick "Use default location"
Select "Linux GCC" as toolchain
Select the glasm-scan-matching folder cloned from github
choose a name for your project (glasm-scan-matching is fine)

Click Next
Click Advanced settings...

In C/C+ +Build:
Cofiguration: [All configurations]
Builder type: Internal builder


In C/C++ General -> Paths and Symbols
Cofiguration: [All configurations]

Add the following Includes [to all languages]:
/usr/include 
/usr/include/freetype2

Add the following libraries:
png 
pngwriter
boost_program_options
m
freetype

Add the following library paths:
/usr/lib/x86_64-linux-gnu/
/usr/lib


Optional: after the first build, set the exe to launch in Run configurations



QUICKSTART
----------

1. set up all the options in ./experiments/current/sm.ini

2. for each chosen algorithm set further options in his *.ini file (filename is set in sm.ini)

3. Run t.cpp


Observe the output on stdout (Console if run from eclipse) and look for images in ./images folder.



EXPERIMENTS
------------

Typical steps for a new set of tests:

1. copy, backup, archive or delete contents already present in the experiments/current folder
2. copy, backup, archive or delete contents already present in the scans folder
3. prepare the scans to use in scans folder
The scans must be in proper format (see source code or better open directly an existing scan in text editor)
The scan.pos (x,y,z) holds the true position from which the scan was taken (ground truth) while scan readings hold the readings sorted with increasing angle.
Ground truth position is necessary for some types of experiments, but not for all.
4. set up all the options in ./experiments/current/sm.ini
Look at existing examples and source code for reference
5. for each chosen algorithm set further options in his *.ini file (filename is set in sm.ini)
Look at existing examples and source code for reference
6. Remove images in images folder

7. Perform the tests

8. write a readme file explaining the experiments and annotate the changeset / revision of the program used to perform them.

9. once finished, save all the following files in zip file:

readme
*.ini files
scans
results
images (optional)

and others if necessary to reproduce the experiments.



DRAWING
-------

- to enable drawing project (ie simulation wide) enable DRAW_PNG in "simulation.h"
this way we avoid compiling and linking drawing code when DRAW_PNG is not enabled.

When adding new code in project, include "simulation.h" to get DRAW_PNG preference
and encircle drawing code with #ifdef DRAW_PNG to include it only if necessary




TYPE OF EXPERIMENTS
-------------------

core:

ref frame <=> global pose from which scan readings were made (more precisely position of sensors' local ref frame origin)

Inputs to algorithms:

Different SM algorithms expect the scans to be in different formats

scan.pos
scan.readings

input:  
    - pair of scans in same ref frame
    - pair of scans each in it's own ref frame
        - both ref frames given
        - relative displacement of one ref frame to the other given
        - no ref frame given at all, only readings


outputs:
    - pose (of new scan, after matching)
    - displacement (motion estimation)

    - multiple hypothesis
        - likelyhood of each (covariance matrix?)

        
Formats:
<todo>        



SIMULATION
----------

sm main program:

- reads ref and new scan
-- scans are on disk: readings + true position from where they were taken
-- different ways exist to pick ref and new scan (see source)

- [optional] applies fake error
-- can be applied to readings or to initial position estimate
--- some algorithms (mbicp?_ do not take initial position estimate as input. For them both ref and new scans are already matched if we do not aply fake error to readings.

- [optional] changes ref frame  (keeping the relative order of readings)
-- some algorithms (mbicp?) consider both scans in same ref frame and output their relative displacement after matching
--- this reference frame must be (0,0,0)

- [optional] resamples, filters or other preprocessing on scans


- finaly the two scans are served as input to various algorithms
